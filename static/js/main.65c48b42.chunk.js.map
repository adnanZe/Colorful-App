{"version":3,"sources":["Components/Header.tsx","Components/ToggleDarkMode.tsx","Components/Button.tsx","Components/RgbInput.tsx","Validations/InputCheck.ts","Components/Modal.tsx","Store/Actions.ts","Store/Reducers.ts","Containers/BoxEditor.tsx","Containers/BoxInserter.tsx","Containers/BoxList.tsx","Containers/App.tsx","Store/Store.ts","index.tsx"],"names":["Title","addCustomPropCSS","order","className","split","map","letter","index","style","toString","ToggleDarkMode","ButtonType","handleChange","type","onClick","Button","props","classNames","innerText","isDisabled","join","disabled","Input","label","register","onChange","id","returnYupSchemaValidator","color","yup","typeError","required","moreThan","lessThan","schema","red","green","blue","Modal","BoxActionTypes","closeModal","rgbInfo","boxNumber","creationTime","toLocaleTimeString","boxAdded","payload","BoxAdded","initialState","boxList","selectedBoxNumber","isMaximum","isSelected","getBoxItemSelected","state","find","box","boxId","getBoxList","getIsMaximum","getIsSelected","boxReducer","action","length","Date","String","v4","BoxUpdate","boxSelected","boxIdSelected","findIndex","slice","BoxSelected","BoxDeleted","filter","BoxEditor","currentBoxSelector","useSelector","isSelectedBox","dispatch","useDispatch","useForm","resolver","yupResolver","mode","formState","errors","isDirty","isValid","handleSubmit","reset","setValue","useState","setRgbInfo","showModal","setShowModal","useEffect","handleModal","useCallback","changeColor","e","newRgbInfo","target","value","handleChangeRed","handleChangeGreen","handleChangeBlue","handleDeleteBox","onSubmit","data","message","button","backgroundColor","submit","BoxInserter","handleRandomRGB","Math","floor","random","BoxList","boxItems","boxActive","App","defaultLight","window","matchMedia","matches","useLocalStorage","theme","setTheme","switchTheme","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65c48b42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TITLE_WORDS = 'Color editor';\r\n\r\nfunction Title(): JSX.Element {\r\n  function addCustomPropCSS(order: number) {\r\n    return { '--order': order } as React.CSSProperties;\r\n  }\r\n\r\n  return (\r\n    <h1 className=\"title\">\r\n      {TITLE_WORDS.split('').map((letter: string, index: number) => {\r\n        return (\r\n          <span\r\n            className={letter == ' ' ? 'space' : 'letter'}\r\n            style={addCustomPropCSS(index + 11)}\r\n            key={`${letter + index.toString()}`}\r\n          >\r\n            {letter !== ' ' ? letter : 's'}\r\n          </span>\r\n        );\r\n      })}\r\n      <span className=\"logoTitle\" style={addCustomPropCSS(23)}></span>\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\ninterface ToggleDarkModeProps {\r\n  handleChange(): void;\r\n}\r\n\r\nfunction ToggleDarkMode({ handleChange }: ToggleDarkModeProps): JSX.Element {\r\n  return (\r\n    <label className=\"toggle-darkMode\">\r\n      <input\r\n        className=\"toggle-checkbox\"\r\n        type=\"checkbox\"\r\n        onClick={handleChange}\r\n      />\r\n      <div className=\"toggle-slot\">\r\n        <div className=\"sun-icon-wrapper\">\r\n          <div\r\n            className=\"iconify sun-icon\"\r\n            data-icon=\"feather-sun\"\r\n            data-inline=\"false\"\r\n          ></div>\r\n        </div>\r\n        <div className=\"toggle-button\"></div>\r\n        <div className=\"moon-icon-wrapper\">\r\n          <div\r\n            className=\"iconify moon-icon\"\r\n            data-icon=\"feather-moon\"\r\n            data-inline=\"false\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default ToggleDarkMode;\r\n","import React from 'react';\r\n\r\nexport enum ButtonType {\r\n  button = 'button',\r\n  submit = 'submit',\r\n}\r\ninterface ButtonProps {\r\n  classNames: string[];\r\n  innerText: string;\r\n  type: ButtonType;\r\n  onClick?(): void;\r\n  isDisabled?: boolean;\r\n}\r\n\r\nfunction Button(props: ButtonProps): JSX.Element {\r\n  const { classNames, innerText, type, onClick, isDisabled } = props;\r\n\r\n  return (\r\n    <button\r\n      className={`button-colorful ${classNames.join(' ')}`}\r\n      type={type}\r\n      onClick={onClick}\r\n      disabled={isDisabled}\r\n    >\r\n      {innerText}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { BaseSyntheticEvent } from 'react';\r\nimport { Path, UseFormRegister } from 'react-hook-form';\r\n\r\nexport interface FormRGBInputs {\r\n  red: string;\r\n  green: string;\r\n  blue: string;\r\n}\r\n\r\ntype InputProps = {\r\n  label: Path<FormRGBInputs>;\r\n  register: UseFormRegister<FormRGBInputs>;\r\n  handleChange?(e: BaseSyntheticEvent): void;\r\n};\r\n// memo\r\nfunction Input(props: InputProps): JSX.Element {\r\n  const { label, register, handleChange } = props;\r\n\r\n  return (\r\n    <label>\r\n      {label}:\r\n      <input\r\n        type=\"number\"\r\n        {...register(label, { onChange: handleChange })}\r\n        id={label}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import * as yup from 'yup';\r\n\r\nfunction returnYupSchemaValidator(color: string) {\r\n    return yup\r\n      .number()\r\n      .typeError(`${color} required`)\r\n      .required(` ${color} required`)\r\n      .moreThan(-1, 'Min nr. 0')\r\n      .lessThan(256, 'Max nr. 255');\r\n  }\r\n  \r\nexport const schema = yup.object({\r\n    red: returnYupSchemaValidator('red'),\r\n    green: returnYupSchemaValidator('green'),\r\n    blue: returnYupSchemaValidator('blue'),\r\n  });","import React from 'react';\r\nimport { BoxItem } from '../Store/Reducers';\r\n\r\ninterface ModalProps {\r\n  closeModal(): void;\r\n  rgbInfo?: BoxItem;\r\n}\r\n\r\nfunction Modal(props: ModalProps): JSX.Element {\r\n  const { closeModal, rgbInfo } = props;\r\n\r\n  return (\r\n    <div className=\"modal-background\">\r\n      <div className=\"modal-container\">\r\n        <button onClick={closeModal}>X</button>\r\n        <div className=\"red-modal\">Red: {rgbInfo?.red}</div>\r\n        <div className=\"green-modal\">Green: {rgbInfo?.green}</div>\r\n        <div className=\"blue-modal\">Blue: {rgbInfo?.blue}</div>\r\n        <div className=\"boxNumber-modal\">Box number: {rgbInfo?.boxNumber}</div>\r\n        {/* <div className=\"boxId-modal\">Box Id: {rgbInfo?.boxId}</div> */}\r\n        <div className=\"creationTime-modal\">\r\n          Creation time: {rgbInfo?.creationTime.toLocaleTimeString()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","export enum BoxActionTypes {\r\n  BoxAdded = 'BOX_ADDED',\r\n  BoxSelected = 'BOX_SELECTED',\r\n  BoxUpdate = 'BOX_UPDATE',\r\n  BoxDeleted = 'BOX_DELETED',\r\n}\r\n\r\ninterface BoxAddPayload {\r\n  red: string;\r\n  green: string;\r\n  blue: string;\r\n}\r\n\r\ninterface BoxSelectedPayload {\r\n  boxId: string;\r\n}\r\n\r\ninterface BoxAdded {\r\n  type: typeof BoxActionTypes.BoxAdded;\r\n  payload: BoxAddPayload;\r\n}\r\n\r\ninterface BoxSelected {\r\n  type: typeof BoxActionTypes.BoxSelected;\r\n  payload: BoxSelectedPayload;\r\n}\r\n\r\ninterface BoxUpdated {\r\n  type: typeof BoxActionTypes.BoxUpdate;\r\n  payload: BoxAddPayload;\r\n}\r\n\r\ninterface BoxDeleted {\r\n  type: typeof BoxActionTypes.BoxDeleted;\r\n}\r\n\r\nexport const boxAdded = (payload: BoxAddPayload): BoxAdded => ({\r\n  type: BoxActionTypes.BoxAdded,\r\n  payload,\r\n});\r\n\r\nexport const boxSelected = (payload: BoxSelectedPayload): BoxSelected => ({\r\n  type: BoxActionTypes.BoxSelected,\r\n  payload,\r\n});\r\n\r\nexport const boxUpdated = (payload: BoxAddPayload): BoxUpdated => ({\r\n  type: BoxActionTypes.BoxUpdate,\r\n  payload,\r\n});\r\n\r\nexport const boxDeleted = (): BoxDeleted => ({\r\n  type: BoxActionTypes.BoxDeleted,\r\n});\r\n\r\nexport type BoxAction = BoxAdded | BoxSelected | BoxUpdated | BoxDeleted;\r\n","import { v4 } from 'uuid';\r\nimport { BoxAction, BoxActionTypes } from './Actions';\r\n\r\nexport interface BoxItem {\r\n  red: string;\r\n  green: string;\r\n  blue: string;\r\n  creationTime: Date;\r\n  boxNumber: string;\r\n  boxId: string;\r\n}\r\n\r\nexport interface BoxState {\r\n  boxList: Array<BoxItem>;\r\n  selectedBoxNumber: string | null;\r\n  isMaximum: boolean;\r\n  isSelected: boolean;\r\n}\r\n\r\nconst initialState: BoxState = {\r\n  boxList: [],\r\n  selectedBoxNumber: null,\r\n  isMaximum: false,\r\n  isSelected: false,\r\n};\r\n\r\nconst boxReducer = (state = initialState, action: BoxAction): BoxState => {\r\n  switch (action.type) {\r\n    case BoxActionTypes.BoxAdded: {\r\n      if (state.boxList.length === 9) {\r\n        return {\r\n          ...state,\r\n          isMaximum: true,\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        isMaximum: false,\r\n        boxList: [\r\n          ...state.boxList,\r\n          {\r\n            ...action.payload,\r\n            creationTime: new Date(),\r\n            boxNumber: String(state.boxList.length + 1),\r\n            boxId: v4(),\r\n          },\r\n        ],\r\n      };\r\n    }\r\n\r\n    case BoxActionTypes.BoxUpdate: {\r\n      if (!state.selectedBoxNumber) {\r\n        return state;\r\n      }\r\n\r\n      const boxSelected = state.boxList.find(\r\n        (box: BoxItem) => box.boxId == state.selectedBoxNumber\r\n      );\r\n      const boxIdSelected = state.boxList.findIndex(\r\n        (box: BoxItem) => boxSelected == box\r\n      );\r\n\r\n      return {\r\n        isSelected: false,\r\n        isMaximum: false,\r\n        selectedBoxNumber: null,\r\n        boxList: [\r\n          ...state.boxList.slice(0, boxIdSelected),\r\n          {\r\n            ...state.boxList[boxIdSelected],\r\n            ...action.payload,\r\n          },\r\n          ...state.boxList.slice(boxIdSelected + 1),\r\n        ],\r\n      };\r\n    }\r\n\r\n    case BoxActionTypes.BoxSelected: {\r\n      return {\r\n        ...state,\r\n        selectedBoxNumber: action.payload.boxId,\r\n        isSelected: true,\r\n      };\r\n    }\r\n\r\n    case BoxActionTypes.BoxDeleted: {\r\n      return {\r\n        ...state,\r\n        boxList: [\r\n          ...state.boxList.filter(\r\n            (box: BoxItem) => box.boxId != state.selectedBoxNumber\r\n          ),\r\n        ],\r\n        isSelected: false,\r\n        isMaximum: false,\r\n        selectedBoxNumber: null,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getBoxItemSelected = (state: BoxState): BoxItem | undefined => {\r\n  const boxSelected = state.boxList.find(\r\n    (box: BoxItem) => box.boxId == state.selectedBoxNumber\r\n  );\r\n\r\n  return boxSelected;\r\n};\r\n\r\nexport const getBoxList = (state: BoxState): BoxItem[] | undefined => {\r\n  return state.boxList;\r\n};\r\n\r\nexport const getIsMaximum = (state: BoxState): boolean => {\r\n  return state.isMaximum;\r\n};\r\n\r\nexport const getIsSelected = (state: BoxState): boolean => {\r\n  return state.isSelected;\r\n};\r\n\r\nexport default boxReducer;\r\n","import React, {\r\n  BaseSyntheticEvent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button, { ButtonType } from '../Components/Button';\r\nimport Input, { FormRGBInputs } from '../Components/RgbInput';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { schema } from '../Validations/InputCheck';\r\nimport Modal from '../Components/Modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BoxItem, getBoxItemSelected, getIsSelected } from '../Store/Reducers';\r\nimport { boxDeleted, boxUpdated } from '../Store/Actions';\r\n\r\nfunction BoxEditor(): JSX.Element {\r\n  const currentBoxSelector = useSelector(getBoxItemSelected);\r\n  const isSelectedBox = useSelector(getIsSelected);\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    register,\r\n    formState: { errors, isDirty, isValid },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm<FormRGBInputs>({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const [rgbInfo, setRgbInfo] = useState<BoxItem>();\r\n  const [showModal, setShowModal] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setRgbInfo(currentBoxSelector);\r\n  }, [currentBoxSelector]);\r\n\r\n  useEffect(() => {\r\n    if (rgbInfo) {\r\n      setValue('red', rgbInfo?.red);\r\n      setValue('green', rgbInfo?.green);\r\n      setValue('blue', rgbInfo?.blue);\r\n    }\r\n  }, [rgbInfo]);\r\n\r\n  function onSubmit(data: FormRGBInputs): void {\r\n    dispatch(\r\n      boxUpdated({\r\n        red: String(data.red),\r\n        green: String(data.green),\r\n        blue: String(data.blue),\r\n      })\r\n    );\r\n\r\n    reset();\r\n  }\r\n\r\n  const handleModal = useCallback(() => {\r\n    const newShowModal = showModal ? false : true;\r\n    setShowModal(newShowModal);\r\n  }, [showModal]);\r\n\r\n  function changeColor(color: keyof BoxItem, e: BaseSyntheticEvent) {\r\n    if (rgbInfo) {\r\n      const newRgbInfo = {\r\n        ...rgbInfo,\r\n        [color]: String(e.target.value),\r\n      };\r\n      setRgbInfo(newRgbInfo);\r\n    }\r\n  }\r\n\r\n  const handleChangeRed = useCallback(\r\n    (e: BaseSyntheticEvent) => {\r\n      changeColor('red', e);\r\n    },\r\n    [rgbInfo]\r\n  );\r\n\r\n  const handleChangeGreen = useCallback(\r\n    (e: BaseSyntheticEvent) => {\r\n      changeColor('green', e);\r\n    },\r\n    [rgbInfo]\r\n  );\r\n\r\n  const handleChangeBlue = useCallback(\r\n    (e: BaseSyntheticEvent) => {\r\n      changeColor('blue', e);\r\n    },\r\n    [rgbInfo]\r\n  );\r\n\r\n  const handleDeleteBox = useCallback(() => {\r\n    dispatch(boxDeleted());\r\n    setValue('red', '');\r\n    setValue('green', '');\r\n    setValue('blue', '');\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"box-editor\">\r\n      <h3>Box Editor</h3>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Input\r\n          label={'red'}\r\n          register={register}\r\n          handleChange={handleChangeRed}\r\n        />\r\n        <Input\r\n          label={'green'}\r\n          register={register}\r\n          handleChange={handleChangeGreen}\r\n        />\r\n        <Input\r\n          label={'blue'}\r\n          register={register}\r\n          handleChange={handleChangeBlue}\r\n        />\r\n        <p className=\"errors-editor\">\r\n          {errors.red?.message || errors.green?.message || errors.blue?.message}\r\n        </p>\r\n        <p className=\"editor-boxNumber\">Box Number: {rgbInfo?.boxNumber}</p>\r\n        <Button\r\n          classNames={['info']}\r\n          innerText={'Info'}\r\n          type={ButtonType.button}\r\n          onClick={handleModal}\r\n          isDisabled={!isSelectedBox}\r\n        />\r\n        {rgbInfo ? (\r\n          <div\r\n            className=\"selected-color\"\r\n            style={{\r\n              backgroundColor: `rgb(${rgbInfo?.red}, ${rgbInfo?.green}, ${rgbInfo?.blue})`,\r\n            }}\r\n          >\r\n            <Button\r\n              classNames={['delete-box']}\r\n              innerText={'Delete'}\r\n              type={ButtonType.button}\r\n              onClick={handleDeleteBox}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <Button\r\n          classNames={['apply-color']}\r\n          innerText={'Apply color'}\r\n          type={ButtonType.submit}\r\n          isDisabled={!isValid || (!isDirty && !isSelectedBox)}\r\n        />\r\n      </form>\r\n      {showModal && (\r\n        <Modal closeModal={handleModal} rgbInfo={currentBoxSelector} />\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default BoxEditor;\r\n","import React, { useCallback } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button, { ButtonType } from '../Components/Button';\r\nimport Input, { FormRGBInputs } from '../Components/RgbInput';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { schema } from '../Validations/InputCheck';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { boxAdded } from '../Store/Actions';\r\nimport { getIsMaximum } from '../Store/Reducers';\r\n\r\nfunction BoxInserter(): JSX.Element {\r\n  const isMaximum = useSelector(getIsMaximum);\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    register,\r\n    formState: { errors, isDirty, isValid },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm<FormRGBInputs>({ resolver: yupResolver(schema), mode: 'onBlur' });\r\n\r\n  function onSubmit(data: FormRGBInputs): void {\r\n    dispatch(\r\n      boxAdded({\r\n        red: String(data.red),\r\n        green: String(data.green),\r\n        blue: String(data.blue),\r\n      })\r\n    );\r\n    reset();\r\n  }\r\n\r\n  const handleRandomRGB = useCallback(() => {\r\n    dispatch(\r\n      boxAdded({\r\n        red: String(Math.floor(Math.random() * 256)),\r\n        green: String(Math.floor(Math.random() * 256)),\r\n        blue: String(Math.floor(Math.random() * 256)),\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <section className=\"box-inserter\">\r\n      <h3>Box Inserter</h3>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Input label=\"red\" register={register} />\r\n        <Input label=\"green\" register={register} />\r\n        <Input label=\"blue\" register={register} />\r\n        <p className=\"errors-inserter\">\r\n          {errors.red?.message || errors.green?.message || errors.blue?.message}\r\n        </p>\r\n        <Button\r\n          classNames={['insert']}\r\n          innerText={'Insert'}\r\n          type={ButtonType.submit}\r\n          isDisabled={!isValid || !isDirty}\r\n        />\r\n        <Button\r\n          classNames={['insert-random']}\r\n          innerText={'Insert random'}\r\n          type={ButtonType.button}\r\n          onClick={handleRandomRGB}\r\n        />\r\n        {isMaximum && (\r\n          <p className=\"alert-maximum\">Please delete or edit boxes</p>\r\n        )}\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default BoxInserter;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { boxSelected } from '../Store/Actions';\r\nimport { BoxItem, getBoxItemSelected, getBoxList } from '../Store/Reducers';\r\n\r\nfunction BoxList(): JSX.Element {\r\n  const boxItems = useSelector(getBoxList);\r\n  const boxActive = useSelector(getBoxItemSelected);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <section className=\"box-list\">\r\n      <h3>Box List</h3>\r\n      {boxItems?.map((box: BoxItem) => {\r\n        return (\r\n          <div\r\n            // eslint-disable-next-line react/jsx-no-bind\r\n            onClick={() => dispatch(boxSelected({ boxId: box.boxId }))}\r\n            style={{\r\n              backgroundColor: `rgb(${box.red}, ${box.green}, ${box.blue} )`,\r\n            }}\r\n            className={boxActive == box ? 'active' : ''}\r\n            id={box.boxId}\r\n            key={box.boxId}\r\n          ></div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default BoxList;\r\n","import React, { useCallback } from 'react';\r\nimport Title from '../Components/Header';\r\nimport useLocalStorage from 'use-local-storage';\r\nimport ToggleDarkMode from '../Components/ToggleDarkMode';\r\nimport BoxEditor from './BoxEditor';\r\nimport BoxInserter from './BoxInserter';\r\nimport BoxList from './BoxList';\r\n\r\nfunction App(): JSX.Element {\r\n  const defaultLight = window.matchMedia(\r\n    '(prefers-color-scheme: light)'\r\n  ).matches;\r\n  const [theme, setTheme] = useLocalStorage(\r\n    'theme',\r\n    defaultLight ? 'dark' : 'light'\r\n  );\r\n\r\n  const switchTheme = useCallback(() => {\r\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\r\n    setTheme(newTheme);\r\n  }, [theme]);\r\n\r\n  return (\r\n    <div className=\"App\" data-theme={theme}>\r\n      <header>\r\n        <Title />\r\n        <ToggleDarkMode handleChange={switchTheme} />\r\n      </header>\r\n      <main>\r\n        <BoxInserter />\r\n        <BoxEditor />\r\n        <BoxList />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, compose } from 'redux';\r\nimport boxReducer from './Reducers';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(boxReducer, composeEnhancers());\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './Containers/App';\r\nimport store from './Store/Store';\r\nimport './Style/index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}